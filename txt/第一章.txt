デザインパターン2で学ぶこと
　・コードをまとめ上げること(構造・組織化)について
いいコードとは？
　・部分的な変更があっても全体に影響が及ばないコード
変更の実施
　・問題発見→変更部分のコード熟読→コード修正・追加→テスト→修正部分をプログラム全体とあうように整理・再構成
分離の効用
　・良いコードの本領発揮は、コードを読む時
　・プログラムが結合していると、もう一方のコードも理解しないといけない
　・分離ができているということは、一方のプログラムを変更してももう一方を変更する必要がない状態
分離のコスト
　・理想は少し関数を触るだけで変更ができる
　・既存のプログラムの構造を変えずに、変更を行うように気を配る。
　・抽象化や拡張性を予測してコードを書いても、使用されないかもしれない。
　・逆に構造化に凝りすぎても、抽象化の階層が増えて目的のコードに辿り着けない。
　・拡張性を考えてコードを書くことはは大事だが、一番はゲームの完成である。
実行効率と実行速度
　・抽象化をすると、実行速度が低下する。
　・しかし、コード拡張性を持たせると色々試しながらゲームが開発できる。
　・面白いゲームを速くする＞(実行速度が)速いゲームゲームを面白する
　・ゲームのデザインが落ち着くまでは、コードに拡張性を持たせよう。
　・デザインガ決まったら、抽象化のコードを削除しよう。
悪いコードの良い点
　・悪いコードにもいい点がある。
　・良いコード(保守しやすい、きれい)を書くには時間がかかる。
　・良いコードを書いても使わない可能性はある、その場合かけた時間は無駄になる。
　・筆者の体験
　　プロトタイプでコードを殴り書きする→製品版に組み込んで欲しい
　・確実に破棄するようなコードは殴り書きでいいが、使い続ける可能性があるのならば、しっかりとコードを書こう。
バランスの保持
　コードを書く際の目標
　　・整ったコード
　　・実行速度が速い
　　・短期間で実装できる
　・この目標それぞれは両立できない
　・試行錯誤しよう。
単純さ
　・コードを読んだ時に何をしているのか正確に把握できる。

・抽象化と分離によりプログラムに柔軟性は持たせられるが、柔軟性が必要でなければ抽象化と分離に時間を割くべきではない。
・低レベルの実行速度の最適化は後回し
・コードの変更の際には後片付け(他コードとの調和)をする・
・面白いと思ったら楽しもう
・